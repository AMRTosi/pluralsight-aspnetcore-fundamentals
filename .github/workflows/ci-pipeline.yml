# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
      id-token: write
      contents: read

env:
  AZURE_WEBAPP_NAME: bethanyspieshop-webapp
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: '8.0.x'
  SONAR_PROJECT_KEY: 'AMRTosi_pluralsight-aspnetcore-fundamentals'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - uses: actions/checkout@main
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 
      
      # Run dotnet build and publish
      - name: SonarScanner, build, test and coverage report
        run: |
          dotnet restore
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-sonarscanner --version 9.0.2
          dotnet sonarscanner begin /k:"AMRTosi_pluralsight-aspnetcore-fundamentals" /o:"amrtosi" /d:sonar.token="f97d9dae9c74d696633e98b737ce3c17e061339f" /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml"
          dotnet build --configuration Release --no-incremental
          dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
          dotnet sonarscanner end /d:sonar.token="f97d9dae9c74d696633e98b737ce3c17e061339f"
      
      # Publish
      - name: 'Publish the project'
        run: dotnet publish -c Release --output ${{ github.workspace }}/publish
          
      # Deploy to Azure Web apps
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v3
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: '${{ github.workspace }}/publish'
      
      # Apply migrations
      - name: Apply EF Core Migrations
        run: |
          dotnet tool install --global dotnet-ef
          dotnet tool restore
          dotnet ef database update -c ${{ secrets.AZURE_SQL_CONNECTION_STRING }} --p BethanysPieShop/BethanyPieShop.csproj -s BethanysPieShop/BethanyPieShop.csproj
        env:
          DOTNET_ROOT: /opt/hostedtoolcache/dotnet
          PATH: /opt/hostedtoolcache/dotnet:$PATH
      
      - name: logout
        run: |
          az logout
